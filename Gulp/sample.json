 
var gulp = require('gulp'),
    sass = require('gulp-sass'),
    browserSync = require('browser-sync'),
    concat = require('gulp-concat'),
    uglify = require('gulp-uglify'),
    cssnano = require('gulp-cssnano'),
    rename = require('gulp-rename'),
    del = require('del'),
    autoprefixer = require('gulp-autoprefixer'),
    bsConfig = require('gulp-bootstrap-configurator'),
    svgSprite = require('gulp-svg-sprites'),
    spritesmith = require('gulp.spritesmith'),
    connect = require('gulp-connect-php');

gulp.task('sass', function(){ // Создаем таск Sass
    return gulp.src([
        'app/sass/variables.sass',
        'app/sass/**/*.sass',
        '!app/sass/libs.sass'
    ]) // Берем источник
        .pipe(concat('temp.sass')) // для обеспечения работы variables во всех стилях (иначе приходистя внутри файлов каждый раз @import делать для переменных)
        .pipe(sass()) // Преобразуем Sass в CSS посредством gulp-sass
        .pipe(autoprefixer(['last 15 versions', '> 1%', 'ie 8', 'ie 7'], { cascade: true })) // Создаем префиксы
        .pipe(cssnano()) // Сжимаем
        .pipe(concat('main.min.css')) // сливаем всё в один файлик
        .pipe(gulp.dest('app/css')) // Выгружаем результата в папку app/css
        .pipe(browserSync.reload({stream: true})) // Обновляем CSS на странице при изменении
});

gulp.task('sass-libs', function(){ // Создаем таск Sass-libs (так как исключали этот файл из таска sass)
    return gulp.src('app/sass/libs.sass') // Берем источник
        .pipe(sass()) // Преобразуем Sass в CSS посредством gulp-sass
        .pipe(autoprefixer(['last 15 versions', '> 1%', 'ie 8', 'ie 7'], { cascade: true })) // Создаем префиксы
        .pipe(gulp.dest('app/css')) // Выгружаем результата в папку app/css
});

gulp.task('css-reset', function(){
    return gulp.src([
        'app/sass/common/reset.css',
        // 'app/libs/animate.css/animate.min.css'
    ]) // Берем источник
        .pipe(gulp.dest('app/css')) // Выгружаем результата в папку app/css
});

gulp.task('browser-sync', function() { // Создаем таск browser-sync
    browserSync({ // Выполняем browser Sync
        server: { // Определяем параметры сервера
            baseDir: 'app' // Директория для сервера - app
        },
        notify: false // Отключаем уведомления
    });
});

gulp.task('scripts', function() {
    return gulp.src([ // Берем все необходимые библиотеки
        'app/libs/jquery/dist/jquery.min.js', // Берем jQuery
        'app/libs/bootstrap-custom/dist/bootstrap.js', // Берем bootstrap
        'app/libs/sticky.js/dist/sticky.compile.js', // Берем sticky.js
        'app/libs/svgxuse/svgxuse.js', // Берем svgxuse
        'app/libs/owl.carousel/dist/owl.carousel.js', // Берем owl.carousel
        'app/libs/magnific-popup/dist/jquery.magnific-popup.js', // Берем magnific-popup
        'app/libs/bootstrap-select/dist/js/bootstrap-select.js', // Берем bootstrap-select
        'app/libs/bootstrap-select/dist/js/i18n/defaults-ru_RU.js', // Берем русификацию для bootstrap-select
        'app/libs/placeholders/dist/placeholders.js', // placeholders for ie < 10
        // 'app/libs/magnific-popup/dist/jquery.magnific-popup.min.js' // Берем Magnific Popup
        ])
        .pipe(concat('libs.min.js')) // Собираем их в кучу в новом файле libs.min.js
        .pipe(uglify()) // Сжимаем JS файл
        .pipe(gulp.dest('app/js')); // Выгружаем в папку app/js
});

gulp.task('init-script', function() {
    return gulp.src([
        'app/js/init.js',
        ])
        .pipe(concat('init.min.js'))
        .pipe(uglify()) // Сжимаем JS файл
        .pipe(gulp.dest('app/js')); // Выгружаем в папку app/js
});

gulp.task('css-libs', ['sass-libs'], function() { // раньше было [sass]
    return gulp.src('app/css/libs.css') // Выбираем файл для минификации
        .pipe(cssnano()) // Сжимаем
        .pipe(rename({suffix: '.min'})) // Добавляем суффикс .min
        .pipe(gulp.dest('app/css')); // Выгружаем в папку app/css
});

gulp.task('watch', ['browser-sync', 'css-reset', 'css-libs', 'sass', 'scripts', 'init-script', 'svg-upd'], function() { // здесь дублируется sass, как и на строке ниже, но здесь для первичной сборки main.min.css, так же с svg-upd
    gulp.watch('app/sass/**/*.sass', ['sass']); // Наблюдение за sass файлами в папке sass
    gulp.watch('app/img/assets/svg/icons/**/*.svg', ['svg-upd']); // Наблюдение за новыми .svg
    // написать наблюдение для JS, SVG
    gulp.watch('app/*.html', browserSync.reload); // Наблюдение за HTML файлами в корне проекта
    gulp.watch('app/js/**/*.js', browserSync.reload); // Наблюдение за JS файлами в папке js
});

gulp.task('clean', function() {
    return del.sync('dist'); // Удаляем папку dist перед сборкой
});

gulp.task('build', ['clean', 'css-reset', 'css-libs', 'sass', 'scripts', 'init-script', 'svg-upd'], function() {

    var buildCss = gulp.src([ // Переносим CSS стили в продакшен
        'app/css/reset.css',
        'app/css/main.min.css',
        'app/css/libs.min.css'
        ])
    .pipe(gulp.dest('dist/css'))

    var buildFonts = gulp.src('app/fonts/**/*') // Переносим шрифты в продакшен
    .pipe(gulp.dest('dist/fonts'))

    var buildJs = gulp.src([
        'app/js/**/*',
        '!app/js/init.js',
    ]) // Переносим скрипты в продакшен
    .pipe(gulp.dest('dist/js'))

    var buildHtml = gulp.src([
        'app/*.html'
    ]) // Переносим HTML в продакшен
    .pipe(gulp.dest('dist'));

    var buildHtmlComponents = gulp.src([
        'app/components/*.html',
    ]) // Переносим HTML-компоненты в продакшен
    .pipe(gulp.dest('dist/components'));

    var buildAllImages = gulp.src([ // Переносим спрайты и картинки
        'app/img/*.*' // лого во-первых отдельно, во вторых png (а для png нет таска для спрайта (пока не нужен))
        ])
    .pipe(gulp.dest('dist/img'));

    var buildContentImages = gulp.src([ // Переносим контентные картинки для инфоблоков
        'app/img/i/*.jpg',
        'app/img/i/*.png'
        ])
    .pipe(gulp.dest('dist/img/i'));

});

gulp.task('default', ['watch']);

gulp.task('make-bootstrap-css', function(){
  return gulp.src("app/libs/bootstrap-custom/config.json")
    .pipe(bsConfig.css({
      bower: true
  }))
    .pipe(gulp.dest("app/libs/bootstrap-custom/dist/"));
    // It will create `bootstrap.css` in directory `libs`.
});

// For JS
gulp.task('make-bootstrap-js', function(){
  return gulp.src("app/libs/bootstrap-custom/config.json")
    .pipe(bsConfig.js({
      bower: true
  }))
    .pipe(gulp.dest("app/libs/bootstrap-custom/dist/"));
    // It will create `bootstrap.js` in directory `libs`.
});

gulp.task('bs-upd', ['make-bootstrap-css','make-bootstrap-js']); // обновление bootstrap

gulp.task('sprites', function () { // собирает спрайт из svg иконок
    return gulp.src('app/img/assets/svg/icons/*.svg')
        .pipe(svgSprite({mode: "symbols", selector: "icon-%f"}))
        .pipe(gulp.dest("app/img/assets/svg"));
});

gulp.task('svg-upd', ['sprites'], function() {

    var svgSpriteCopy = gulp.src('app/img/assets/svg/svg/symbols.svg') // Переносим спрайт
    .pipe(rename('svg-sprite.svg')) // rename
    .pipe(gulp.dest('app/img'));

});

gulp.task('img-sprite-make', function () {
  var spriteData = gulp.src('app/img/assets/img/*.png').pipe(spritesmith({
    imgName: 'img-sprite.png',
    cssName: 'img-sprite.sass',
    algorithm: 'binary-tree',
  }));
  spriteData.img.pipe(gulp.dest('app/img/'));
  // spriteData.css.pipe(gulp.dest('app/img/assets/img'));
  spriteData.css.pipe(gulp.dest('app/img/assets/img'));
    return spriteData
});

gulp.task('img-sprite-styles',function(){
    return gulp.src(['app/img/assets/img/img-sprite.sass'])
    .pipe(replace('img-sprite.png', 'img/img-sprite.png'))
    // .pipe(replace('.icon-', '.img-sprite-'))
    .pipe(gulp.dest('app/sass/img-sprite/'));
});

// Таски для запуска разработки на виртуальном сервере Linux
gulp.task('php-server', function() {
	connect.server({
		base: 'app'
	}, function (){
		browserSync({
			proxy: 'proecp' // виртуальный сервер
		});
	});
});

// Tаск ниже по сути копия таска watch + наблюдение за .php файлами
gulp.task('php', ['php-server', 'css-reset', 'css-libs', 'sass', 'scripts', 'init-script', 'svg-upd'], function () {
    gulp.watch('app/sass/**/*.sass', ['sass']);
    gulp.watch('app/img/assets/svg/icons/**/*.svg', ['svg-upd']);
    gulp.watch('app/*.html', browserSync.reload);
    gulp.watch('app/js/**/*.js', browserSync.reload);
    gulp.watch('app/**/*.php', browserSync.reload); // Наблюдение за всеми PHP файлами
});

// gulp.task('img-sprite-sass', function(){
//     return gulp.src([
//         'app/img/assets/img/img-sprite.sass'
//     ])
//         .pipe(sass())
//         .pipe(concat('test.css'))
//         .pipe(gulp.dest('app/img/assets/img'))
// });

// gulp.task('sprite', gulp.series('make_sprite', 'sprite_styles'));

// animate.css custom!
