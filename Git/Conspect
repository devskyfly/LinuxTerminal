#########################################
##Конфигурация

#Конфигурация Git разбита на три уровня:

root    git config --system key val
user    git config --global key val
current git config key val

#Просмотр свойств конфигурации 

git config --list

#Создание git репозитория

git init - создание пустого репозитория

git clone https://github.com/devskyfly/LinuxTerminal

################################
##Запись изменений в репозиторий

#Состояния файлов
-неотследиваемые untracked
-неизмененные not changed
-измененные changed
-проиндексированные indexed

git status - предоставляет статус всех файлов в репозитории

#Слежение за новыми файлами

git add filename (pattern) - эти файлы попадут в индекс

N.B. В commit попадут только проиндексированные файлы

##############################################################
##Просмотр проиндексированных и непроиндексированных именений

git diff - покажет, что было изменено но непроиндексировано

Эта функция имеет три режима:

git diff  рабочая папка --- область индексирования

git diff --staged область индексирования --- коммит

git diff --cached покажет проиндексированные изменения

####################
##Фиксация изменений

Все что не было проиндексированно не попадет в коммит

no index x-x no commit

git commit -v - добавляет в комментарий список изменений

git commit -m - позволяет создать commit из командной строки

Коммиты используются для:

-откатов
-сравнений

#################
##Удаление файлов

Удаление файлов из отслеживаемых

git rm - удаляет файл из !отслеживаемых и из !папки

git rm -f - удаляет измененный файл

git rm --cached удаляет проиндексированный файл

####################
##Перемещение файлов

Git не отслеживает перемещение файлов в явном виде

git mv file_from file_to

~

mv file_from file_to
git rm file_from
git add file_to

#########################
##Просмотр истории версий

git log -n -последние коммиты

git log -p -показывает разницу между разными коммитами

git log --stat -дает краткую статистику по внесенным изменениям

git log --pretty -меняет формат вывода

--pretty= 
oneline
short
full
fuller

git log --pretty=format :"%k %k"

%h - сокращение hash
%an - author name
%cd - create date
%cr - create date relative  
%s - comment

Автор - человек создавший файл
Создатель версии (commiter) - кто внес правки

git log --pretty=format:" " --graph -показывает ветвление проекта

#####################
##Условия команды log

--since=2.weeks --until
--auth (по автору)
--grep (по комментариям)
-S value (ищет по изм. внутри файлов)

##################
##Отмена изменений

Эта ситуация возникает когда:

-не все файлы попали в коммит
-была допущена ошибка в комментарии

Добавление файлов:

N.B. сначала надо проиндексировать файлы git add .
git commit --amend - берет область индексирования и добавляет в commit

Изменение комментария:

git commit --amend

После этого откроется редактор, где можно будет изменить комментарий

#######################
##Отмена индексирования

git reset HEAD file - затрагивает только область индексирования
git reset --hard - затрагивает файлы в рабочей области и в области индексирования


###################################
##Отмена внесенных изменений в файл

git checkout -- filename

######
##Тэги

git tag -a v0.0.1 -m "Comment" - создает тэг с комментарием
git show v0.0.1 - дает информацию по тэгу 
git tag -l - выводит список тэгов

Тэг можно присвоить не только текущему коммиту, но и ранее сделанному

git tag v.0.0.0 hash

#Тэги не пушатся сами по себе, поэтому их надо отпралять в репозиторий в ручном режиме

git push origin tagname - добавляет определенный тэг
git push origin --tags - добавляет те, что не были ранее добавлены в репозиторий

